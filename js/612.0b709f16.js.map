{"version":3,"file":"js/612.0b709f16.js","mappings":"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","sources":["webpack://dbd_management_system/../../../../../packages/components/checkbox/src/checkbox.ts","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/constants.ts","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/composables/use-checkbox-disabled.ts","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/composables/use-checkbox-event.ts","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/composables/use-checkbox-model.ts","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/composables/use-checkbox-status.ts","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/composables/use-checkbox.ts","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/checkbox.vue","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/checkbox-button.vue","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/checkbox-group.ts","webpack://dbd_management_system/../../../../../packages/components/checkbox/src/checkbox-group.vue","webpack://dbd_management_system/../../../../../packages/components/checkbox/index.ts"],"sourcesContent":["import { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useAriaProps, useSizeProp } from '@element-plus/hooks'\nimport { isBoolean, isNumber, isString } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type Checkbox from './checkbox.vue'\n\nexport type CheckboxValueType = string | number | boolean\n\nexport const checkboxProps = {\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: undefined,\n  },\n  /**\n   * @description label of the Checkbox when used inside a `checkbox-group`\n   */\n  label: {\n    type: [String, Boolean, Number, Object],\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox when used inside a `checkbox-group`\n   */\n  value: {\n    type: [String, Boolean, Number, Object],\n    default: undefined,\n  },\n  /**\n   * @description Set indeterminate state, only responsible for style control\n   */\n  indeterminate: Boolean,\n  /**\n   * @description whether the Checkbox is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description if the Checkbox is checked\n   */\n  checked: Boolean,\n  /**\n   * @description native 'name' attribute\n   */\n  name: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox if it's checked\n   */\n  trueValue: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description value of the Checkbox if it's not checked\n   */\n  falseValue: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @deprecated use `trueValue` instead\n   * @description value of the Checkbox if it's checked\n   */\n  trueLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @deprecated use `falseValue` instead\n   * @description value of the Checkbox if it's not checked\n   */\n  falseLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  /**\n   * @description input id\n   */\n  id: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description whether to add a border around Checkbox\n   */\n  border: Boolean,\n  /**\n   * @description size of the Checkbox\n   */\n  size: useSizeProp,\n  /**\n   * @description input tabindex\n   */\n  tabindex: [String, Number],\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  ...useAriaProps(['ariaControls']),\n}\n\nexport const checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport type CheckboxProps = ExtractPropTypes<typeof checkboxProps>\nexport type CheckboxEmits = typeof checkboxEmits\nexport type CheckboxInstance = InstanceType<typeof Checkbox>\n","import type { InjectionKey, ToRefs, WritableComputedRef } from 'vue'\nimport type { CheckboxGroupProps } from './checkbox-group'\n\ntype CheckboxGroupContext = {\n  modelValue?: WritableComputedRef<any>\n  changeEvent?: (...args: any) => any\n} & ToRefs<\n  Pick<\n    CheckboxGroupProps,\n    'size' | 'min' | 'max' | 'disabled' | 'validateEvent' | 'fill' | 'textColor'\n  >\n>\n\nexport const checkboxGroupContextKey: InjectionKey<CheckboxGroupContext> =\n  Symbol('checkboxGroupContextKey')\n","import { computed, inject } from 'vue'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport { isUndefined } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { CheckboxModel, CheckboxStatus } from '../composables'\n\nexport const useCheckboxDisabled = ({\n  model,\n  isChecked,\n}: Pick<CheckboxModel, 'model'> & Pick<CheckboxStatus, 'isChecked'>) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n\n  const isLimitDisabled = computed(() => {\n    const max = checkboxGroup?.max?.value\n    const min = checkboxGroup?.min?.value\n    return (\n      (!isUndefined(max) && model.value.length >= max && !isChecked.value) ||\n      (!isUndefined(min) && model.value.length <= min && isChecked.value)\n    )\n  })\n\n  const isDisabled = useFormDisabled(\n    computed(() => checkboxGroup?.disabled.value || isLimitDisabled.value)\n  )\n\n  return {\n    isDisabled,\n    isLimitDisabled,\n  }\n}\n\nexport type CheckboxDisabled = ReturnType<typeof useCheckboxDisabled>\n","import { computed, getCurrentInstance, inject, nextTick, watch } from 'vue'\nimport { useFormItem } from '@element-plus/components/form'\nimport { debugWarn } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { useFormItemInputId } from '@element-plus/components/form'\nimport type { CheckboxProps } from '../checkbox'\nimport type {\n  CheckboxDisabled,\n  CheckboxModel,\n  CheckboxStatus,\n} from '../composables'\n\nexport const useCheckboxEvent = (\n  props: CheckboxProps,\n  {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  }: Pick<CheckboxModel, 'model' | 'isLimitExceeded'> &\n    Pick<CheckboxStatus, 'hasOwnLabel'> &\n    Pick<CheckboxDisabled, 'isDisabled'> &\n    Pick<ReturnType<typeof useFormItemInputId>, 'isLabeledByFormItem'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const { formItem } = useFormItem()\n  const { emit } = getCurrentInstance()!\n\n  function getLabeledValue(value: string | number | boolean) {\n    return [true, props.trueValue, props.trueLabel].includes(value)\n      ? props.trueValue ?? props.trueLabel ?? true\n      : props.falseValue ?? props.falseLabel ?? false\n  }\n\n  function emitChangeEvent(\n    checked: string | number | boolean,\n    e: InputEvent | MouseEvent\n  ) {\n    emit('change', getLabeledValue(checked), e)\n  }\n\n  function handleChange(e: Event) {\n    if (isLimitExceeded.value) return\n\n    const target = e.target as HTMLInputElement\n    emit('change', getLabeledValue(target.checked), e)\n  }\n\n  async function onClickRoot(e: MouseEvent) {\n    if (isLimitExceeded.value) return\n\n    if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {\n      // fix: https://github.com/element-plus/element-plus/issues/9981\n      const eventTargets: EventTarget[] = e.composedPath()\n      const hasLabel = eventTargets.some(\n        (item) => (item as HTMLElement).tagName === 'LABEL'\n      )\n      if (!hasLabel) {\n        model.value = getLabeledValue(\n          [false, props.falseValue, props.falseLabel].includes(model.value)\n        )\n        await nextTick()\n        emitChangeEvent(model.value, e)\n      }\n    }\n  }\n\n  const validateEvent = computed(\n    () => checkboxGroup?.validateEvent || props.validateEvent\n  )\n\n  watch(\n    () => props.modelValue,\n    () => {\n      if (validateEvent.value) {\n        formItem?.validate('change').catch((err) => debugWarn(err))\n      }\n    }\n  )\n\n  return {\n    handleChange,\n    onClickRoot,\n  }\n}\n","import { computed, getCurrentInstance, inject, ref } from 'vue'\nimport { isArray, isUndefined } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { CheckboxProps } from '../checkbox'\n\nexport const useCheckboxModel = (props: CheckboxProps) => {\n  const selfModel = ref<unknown>(false)\n  const { emit } = getCurrentInstance()!\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isGroup = computed(() => isUndefined(checkboxGroup) === false)\n  const isLimitExceeded = ref(false)\n  const model = computed({\n    get() {\n      return isGroup.value\n        ? checkboxGroup?.modelValue?.value\n        : props.modelValue ?? selfModel.value\n    },\n\n    set(val: unknown) {\n      if (isGroup.value && isArray(val)) {\n        isLimitExceeded.value =\n          checkboxGroup?.max?.value !== undefined &&\n          val.length > checkboxGroup?.max.value &&\n          val.length > model.value.length\n        isLimitExceeded.value === false && checkboxGroup?.changeEvent?.(val)\n      } else {\n        emit(UPDATE_MODEL_EVENT, val)\n        selfModel.value = val\n      }\n    },\n  })\n\n  return {\n    model,\n    isGroup,\n    isLimitExceeded,\n  }\n}\n\nexport type CheckboxModel = ReturnType<typeof useCheckboxModel>\n","import { computed, inject, ref, toRaw } from 'vue'\nimport { isEqual } from 'lodash-unified'\nimport { useFormSize } from '@element-plus/components/form'\nimport { isArray, isBoolean, isObject, isPropAbsent } from '@element-plus/utils'\nimport { checkboxGroupContextKey } from '../constants'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\nimport type { CheckboxModel } from '../composables'\n\nexport const useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Pick<CheckboxModel, 'model'>\n) => {\n  const checkboxGroup = inject(checkboxGroupContextKey, undefined)\n  const isFocused = ref(false)\n  const actualValue = computed(() => {\n    // In version 2.x, if there's no props.value, props.label will act as props.value\n    // In version 3.x, remove this computed value, use props.value instead.\n    if (!isPropAbsent(props.value)) {\n      return props.value\n    }\n    return props.label\n  })\n  const isChecked = computed<boolean>(() => {\n    const value = model.value\n    if (isBoolean(value)) {\n      return value\n    } else if (isArray(value)) {\n      if (isObject(actualValue.value)) {\n        return value.map(toRaw).some((o) => isEqual(o, actualValue.value))\n      } else {\n        return value.map(toRaw).includes(actualValue.value)\n      }\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueValue || value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxButtonSize = useFormSize(\n    computed(() => checkboxGroup?.size?.value),\n    {\n      prop: true,\n    }\n  )\n  const checkboxSize = useFormSize(computed(() => checkboxGroup?.size?.value))\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!slots.default || !isPropAbsent(actualValue.value)\n  })\n\n  return {\n    checkboxButtonSize,\n    isChecked,\n    isFocused,\n    checkboxSize,\n    hasOwnLabel,\n    actualValue,\n  }\n}\n\nexport type CheckboxStatus = ReturnType<typeof useCheckboxStatus>\n","import { computed } from 'vue'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport { isArray, isPropAbsent } from '@element-plus/utils'\nimport { useDeprecated } from '@element-plus/hooks'\nimport { useCheckboxDisabled } from './use-checkbox-disabled'\nimport { useCheckboxEvent } from './use-checkbox-event'\nimport { useCheckboxModel } from './use-checkbox-model'\nimport { useCheckboxStatus } from './use-checkbox-status'\nimport type { ComponentInternalInstance } from 'vue'\n\nimport type { CheckboxProps } from '../checkbox'\n\nexport const useCheckbox = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots']\n) => {\n  const { formItem: elFormItem } = useFormItem()\n  const { model, isGroup, isLimitExceeded } = useCheckboxModel(props)\n  const {\n    isFocused,\n    isChecked,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    actualValue,\n  } = useCheckboxStatus(props, slots, { model })\n  const { isDisabled } = useCheckboxDisabled({ model, isChecked })\n  const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup,\n  })\n  const { handleChange, onClickRoot } = useCheckboxEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  })\n\n  const setStoreValue = () => {\n    function addToStore() {\n      if (isArray(model.value) && !model.value.includes(actualValue.value)) {\n        model.value.push(actualValue.value)\n      } else {\n        model.value = props.trueValue ?? props.trueLabel ?? true\n      }\n    }\n    props.checked && addToStore()\n  }\n\n  setStoreValue()\n\n  useDeprecated(\n    {\n      from: 'label act as value',\n      replacement: 'value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => isGroup.value && isPropAbsent(props.value))\n  )\n\n  useDeprecated(\n    {\n      from: 'true-label',\n      replacement: 'true-value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => !!props.trueLabel)\n  )\n\n  useDeprecated(\n    {\n      from: 'false-label',\n      replacement: 'false-value',\n      version: '3.0.0',\n      scope: 'el-checkbox',\n      ref: 'https://element-plus.org/en-US/component/checkbox.html',\n    },\n    computed(() => !!props.falseLabel)\n  )\n\n  return {\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isFocused,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    actualValue,\n    handleChange,\n    onClickRoot,\n  }\n}\n","<template>\n  <component\n    :is=\"!hasOwnLabel && isLabeledByFormItem ? 'span' : 'label'\"\n    :class=\"compKls\"\n    :aria-controls=\"indeterminate ? ariaControls : null\"\n    @click=\"onClickRoot\"\n  >\n    <span :class=\"spanKls\">\n      <input\n        v-if=\"trueValue || falseValue || trueLabel || falseLabel\"\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :indeterminate=\"indeterminate\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        :disabled=\"isDisabled\"\n        :true-value=\"trueValue ?? trueLabel ?? true\"\n        :false-value=\"falseValue ?? falseLabel ?? false\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n        @click.stop\n      />\n      <input\n        v-else\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :indeterminate=\"indeterminate\"\n        :disabled=\"isDisabled\"\n        :value=\"actualValue\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n        @click.stop\n      />\n      <span :class=\"ns.e('inner')\" />\n    </span>\n    <span v-if=\"hasOwnLabel\" :class=\"ns.e('label')\">\n      <slot />\n      <template v-if=\"!$slots.default\">{{ label }}</template>\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxEmits, checkboxProps } from './checkbox'\nimport { useCheckbox } from './composables'\n\ndefineOptions({\n  name: 'ElCheckbox',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  inputId,\n  isLabeledByFormItem,\n  isChecked,\n  isDisabled,\n  isFocused,\n  checkboxSize,\n  hasOwnLabel,\n  model,\n  actualValue,\n  handleChange,\n  onClickRoot,\n} = useCheckbox(props, slots)\n\nconst ns = useNamespace('checkbox')\n\nconst compKls = computed(() => {\n  return [\n    ns.b(),\n    ns.m(checkboxSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('bordered', props.border),\n    ns.is('checked', isChecked.value),\n  ]\n})\n\nconst spanKls = computed(() => {\n  return [\n    ns.e('input'),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('indeterminate', props.indeterminate),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n","<template>\n  <label :class=\"labelKls\">\n    <input\n      v-if=\"trueValue || falseValue || trueLabel || falseLabel\"\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueValue ?? trueLabel ?? true\"\n      :false-value=\"falseValue ?? falseLabel ?? false\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n    <input\n      v-else\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :value=\"actualValue\"\n      @change=\"handleChange\"\n      @focus=\"isFocused = true\"\n      @blur=\"isFocused = false\"\n      @click.stop\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : undefined\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxGroupContextKey } from './constants'\nimport { useCheckbox } from './composables'\nimport { checkboxEmits, checkboxProps } from './checkbox'\n\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCheckboxButton',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  isFocused,\n  isChecked,\n  isDisabled,\n  checkboxButtonSize,\n  model,\n  actualValue,\n  handleChange,\n} = useCheckbox(props, slots)\nconst checkboxGroup = inject(checkboxGroupContextKey, undefined)\nconst ns = useNamespace('checkbox')\n\nconst activeStyle = computed<CSSProperties>(() => {\n  const fillValue = checkboxGroup?.fill?.value ?? ''\n  return {\n    backgroundColor: fillValue,\n    borderColor: fillValue,\n    color: checkboxGroup?.textColor?.value ?? '',\n    boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : undefined,\n  }\n})\n\nconst labelKls = computed(() => {\n  return [\n    ns.b('button'),\n    ns.bm('button', checkboxButtonSize.value),\n    ns.is('disabled', isDisabled.value),\n    ns.is('checked', isChecked.value),\n    ns.is('focus', isFocused.value),\n  ]\n})\n</script>\n","import { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useAriaProps, useSizeProp } from '@element-plus/hooks'\nimport { buildProps, definePropType, isArray } from '@element-plus/utils'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type checkboxGroup from './checkbox-group.vue'\nimport type { CheckboxValueType } from './checkbox'\n\nexport type CheckboxGroupValueType = Exclude<CheckboxValueType, boolean>[]\n\nexport const checkboxGroupProps = buildProps({\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: definePropType<CheckboxGroupValueType>(Array),\n    default: () => [],\n  },\n  /**\n   * @description whether the nesting checkboxes are disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description minimum number of checkbox checked\n   */\n  min: Number,\n  /**\n   * @description maximum number of checkbox checked\n   */\n  max: Number,\n  /**\n   * @description size of checkbox\n   */\n  size: useSizeProp,\n  /**\n   * @description border and background color when button is active\n   */\n  fill: String,\n  /**\n   * @description font color when button is active\n   */\n  textColor: String,\n  /**\n   * @description element tag of the checkbox group\n   */\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  ...useAriaProps(['ariaLabel']),\n} as const)\n\nexport const checkboxGroupEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxGroupValueType) => isArray(val),\n  change: (val: CheckboxValueType[]) => isArray(val),\n}\n\nexport type CheckboxGroupProps = ExtractPropTypes<typeof checkboxGroupProps>\nexport type CheckboxGroupEmits = typeof checkboxGroupEmits\nexport type CheckboxGroupInstance = InstanceType<typeof checkboxGroup>\n","<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"\n      !isLabeledByFormItem ? ariaLabel || 'checkbox-group' : undefined\n    \"\n    :aria-labelledby=\"isLabeledByFormItem ? formItem?.labelId : undefined\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormItem, useFormItemInputId } from '@element-plus/components/form'\nimport { checkboxGroupEmits, checkboxGroupProps } from './checkbox-group'\nimport { checkboxGroupContextKey } from './constants'\n\nimport type { CheckboxGroupValueType } from './checkbox-group'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(checkboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\nconst ns = useNamespace('checkbox')\n\nconst { formItem } = useFormItem()\nconst { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst changeEvent = async (value: CheckboxGroupValueType) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  await nextTick()\n  emit('change', value)\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val: CheckboxGroupValueType) {\n    changeEvent(val)\n  },\n})\n\nprovide(checkboxGroupContextKey, {\n  ...pick(toRefs(props), [\n    'size',\n    'min',\n    'max',\n    'disabled',\n    'validateEvent',\n    'fill',\n    'textColor',\n  ]),\n  modelValue,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n","import { withInstall, withNoopInstall } from '@element-plus/utils'\n\nimport Checkbox from './src/checkbox.vue'\nimport CheckboxButton from './src/checkbox-button.vue'\nimport CheckboxGroup from './src/checkbox-group.vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElCheckbox: SFCWithInstall<typeof Checkbox> & {\n  CheckboxButton: typeof CheckboxButton\n  CheckboxGroup: typeof CheckboxGroup\n} = withInstall(Checkbox, {\n  CheckboxButton,\n  CheckboxGroup,\n})\nexport default ElCheckbox\n\nexport const ElCheckboxButton: SFCWithInstall<typeof CheckboxButton> =\n  withNoopInstall(CheckboxButton)\nexport const ElCheckboxGroup: SFCWithInstall<typeof CheckboxGroup> =\n  withNoopInstall(CheckboxGroup)\n\nexport * from './src/checkbox-group'\nexport * from './src/checkbox'\nexport * from './src/constants'\n"],"names":["checkboxProps","modelValue","type","Number","String","Boolean","default","label","Object","value","indeterminate","disabled","checked","name","trueValue","falseValue","trueLabel","falseLabel","id","border","size","useSizeProp","tabindex","validateEvent","useAriaProps","checkboxEmits","UPDATE_MODEL_EVENT","val","isString","isNumber","isBoolean","change","checkboxGroupContextKey","Symbol","useCheckboxDisabled","model","isChecked","checkboxGroup","inject","isLimitDisabled","computed","_a","_b","max","min","isUndefined","length","isDisabled","useFormDisabled","useCheckboxEvent","props","isLimitExceeded","hasOwnLabel","isLabeledByFormItem","formItem","useFormItem","emit","getCurrentInstance","getLabeledValue","_c","_d","includes","emitChangeEvent","e","handleChange","target","onClickRoot","eventTargets","composedPath","hasLabel","some","item","tagName","nextTick","watch","validate","catch","err","debugWarn","useCheckboxModel","selfModel","ref","isGroup","get","set","isArray","changeEvent","call","useCheckboxStatus","slots","isFocused","actualValue","isPropAbsent","isObject","map","toRaw","o","isEqual","checkboxButtonSize","useFormSize","prop","checkboxSize","useCheckbox","elFormItem","inputId","useFormItemInputId","formItemContext","disableIdGeneration","disableIdManagement","setStoreValue","addToStore","push","useDeprecated","from","replacement","version","scope","useSlots","ns","useNamespace","compKls","b","m","is","spanKls","activeStyle","fillValue","fill","backgroundColor","borderColor","color","textColor","boxShadow","labelKls","bm","checkboxGroupProps","buildProps","definePropType","Array","tag","checkboxGroupEmits","groupId","async","provide","pick","toRefs","_ctx","_cache","openBlock","createBlock","resolveDynamicComponent","ElCheckbox","withInstall","Checkbox","CheckboxButton","CheckboxGroup","withNoopInstall"],"sourceRoot":""}